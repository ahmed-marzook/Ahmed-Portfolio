---
import "../styles/index.css";

interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Ahmed Marzook | Software Engineer Portfolio",
  description = "Full-stack software engineer crafting resilient platforms, immersive interfaces, and meaningful developer experiences.",
} = Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href="favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Plus+Jakarta+Sans:wght@500;600&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
  </head>
  <body>
    <slot />
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const initRevealAnimations = () => {
          const revealElements = Array.from(
            document.querySelectorAll('[data-reveal]'),
          );

          if (!revealElements.length) {
            return;
          }

          const prefersReducedMotion = window.matchMedia(
            '(prefers-reduced-motion: reduce)'
          );

          const pendingElements = new Set(revealElements);

          const showElement = element => {
            element.classList.add('reveal-visible');
            pendingElements.delete(element);
          };

          let observer = null;
          let scrollRafId = null;

          const cleanup = () => {
            if (scrollRafId !== null) {
              window.cancelAnimationFrame(scrollRafId);
              scrollRafId = null;
            }

            window.removeEventListener('scroll', scheduleVisibilityCheck);
            window.removeEventListener('resize', scheduleVisibilityCheck);

            observer?.disconnect();
          };

          const runVisibilityCheck = () => {
            scrollRafId = null;

            if (!pendingElements.size) {
              cleanup();
              return;
            }

            const viewportHeight =
              window.innerHeight || document.documentElement.clientHeight || 0;
            const activationPoint = viewportHeight * 0.85;
            const topBoundary = viewportHeight * 0.05;

            pendingElements.forEach(element => {
              const rect = element.getBoundingClientRect();

              if (rect.top <= activationPoint && rect.bottom >= topBoundary) {
                showElement(element);
                observer?.unobserve(element);
              }
            });

            if (!pendingElements.size) {
              cleanup();
            }
          };

          const scheduleVisibilityCheck = () => {
            if (scrollRafId !== null) {
              return;
            }

            scrollRafId = window.requestAnimationFrame(runVisibilityCheck);
          };

          const showAll = () => {
            Array.from(pendingElements).forEach(showElement);
            cleanup();
          };

          if (prefersReducedMotion.matches) {
            showAll();
            return;
          }

          if ('IntersectionObserver' in window) {
            observer = new IntersectionObserver(
              entries => {
                entries.forEach(entry => {
                  if (entry.isIntersecting) {
                    showElement(entry.target);
                    observer?.unobserve(entry.target);
                  }
                });

                if (!pendingElements.size) {
                  cleanup();
                }
              },
              {
                rootMargin: '0px 0px -12% 0px',
                threshold: 0.2,
              },
            );

            pendingElements.forEach(element => observer?.observe(element));
          }

          window.addEventListener('scroll', scheduleVisibilityCheck, {
            passive: true,
          });
          window.addEventListener('resize', scheduleVisibilityCheck);

          scheduleVisibilityCheck();

          const handleMotionPreferenceChange = event => {
            if (event.matches) {
              showAll();
            }
          };

          if (typeof prefersReducedMotion.addEventListener === 'function') {
            prefersReducedMotion.addEventListener('change', handleMotionPreferenceChange);
          } else if (typeof prefersReducedMotion.addListener === 'function') {
            prefersReducedMotion.addListener(handleMotionPreferenceChange);
          }
        };

        initRevealAnimations();

        const navLinks = document.querySelector('.nav-links');
        const menuToggle = document.querySelector('.menu-toggle');

        if (
          !(navLinks instanceof HTMLElement) ||
          !(menuToggle instanceof HTMLElement)
        ) {
          return;
        }

        const toggleMenu = () => {
          navLinks.classList.toggle('active');
          menuToggle.classList.toggle('open');
        };

        menuToggle.addEventListener('click', toggleMenu);

        document.addEventListener('click', event => {
          const target = event.target;

          if (!(target instanceof Element) || target.closest('nav')) {
            return;
          }

          navLinks.classList.remove('active');
          menuToggle.classList.remove('open');
        });

        navLinks.querySelectorAll('a').forEach(link => {
          link.addEventListener('click', () => {
            navLinks.classList.remove('active');
            menuToggle.classList.remove('open');
          });
        });
      });
    </script>
  </body>
</html>
